{"version":3,"sources":["hooks/MemoryContext.js","components/Line.js","components/LineContainer.js","components/RegisterValues.js","components/Editor.js","App.js","index.js"],"names":["MemoryContext","React","createContext","MemoryProvider","children","useState","stack","Array","fill","programRunning","AC","PC","memory","setMemory","Provider","value","Line","lineNum","useContext","lineCountClass","inputClass","className","type","onBlur","e","disabled","LineContainer","lineCount","useEffect","inputList","document","querySelectorAll","i","length","map","_","RegisterValues","Editor","App","getValue","at","val","Number","commands","NULL","__","prev","STOP","LOAD","STORE","el","JUMP","JNEG","JZERO","ADD","SUB","MULT","DIV","MOD","OR","AND","NOT","doOperation","operation","split","command","addressType","resetMemory","onClick","isNaN","classList","add","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.70949e77.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport const MemoryContext = React.createContext();\r\n\r\nexport const MemoryProvider = ({ children }) => {\r\n\tconst [memory, setMemory] = useState({\r\n\t\tstack: Array(31).fill(0),\r\n\t\tprogramRunning: false,\r\n\t\tAC: 0,\r\n\t\tPC: 0,\r\n\t});\r\n\r\n\treturn (\r\n\t\t<MemoryContext.Provider value={{ memory, setMemory }}>\r\n\t\t\t{children}\r\n\t\t</MemoryContext.Provider>\r\n\t);\r\n};\r\n","import { useContext } from 'react';\r\nimport { MemoryContext } from '../hooks/MemoryContext';\r\n\r\nconst Line = ({ lineNum }) => {\r\n\tconst { memory, setMemory } = useContext(MemoryContext);\r\n\r\n\tconst handleChange = e => {\r\n\t\treturn 0;\r\n\t};\r\n\r\n\tconst lineCountClass =\r\n\t\tlineNum == memory.PC && memory.programRunning\r\n\t\t\t? 'current-line-num'\r\n\t\t\t: 'line-count-num';\r\n\tconst inputClass =\r\n\t\tlineNum == memory.PC && memory.programRunning ? 'current-line-input' : '';\r\n\r\n\treturn (\r\n\t\t<div className=\"line\">\r\n\t\t\t<div className={lineCountClass}>{lineNum}.</div>\r\n\t\t\t<input\r\n\t\t\t\tclassName={inputClass}\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tonBlur={handleChange}\r\n\t\t\t\tdisabled={memory.programRunning}\r\n\t\t\t></input>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Line;\r\n","import Line from './Line';\r\nimport { useEffect, useContext } from 'react';\r\nimport { MemoryContext } from '../hooks/MemoryContext';\r\n\r\nconst LineContainer = ({ lineCount }) => {\r\n\tconst { memory, setMemory } = useContext(MemoryContext);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst inputList = document.querySelectorAll('.line > input');\r\n\t\tfor (let i = 0; i < inputList.length; i++) {\r\n\t\t\tif (memory.stack[i]) {\r\n\t\t\t\tinputList[i].value = memory.stack[i];\r\n\t\t\t}\r\n\t\t}\r\n\t}, [memory.stack]);\r\n\r\n\treturn (\r\n\t\t<div className=\"line-container\">\r\n\t\t\t{Array(lineCount)\r\n\t\t\t\t.fill(0)\r\n\t\t\t\t.map((_, i) => (\r\n\t\t\t\t\t<Line lineNum={i} />\r\n\t\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default LineContainer;\r\n","import { useContext } from 'react';\r\nimport { MemoryContext } from '../hooks/MemoryContext';\r\n\r\nconst RegisterValues = () => {\r\n\tconst { memory, setMemory } = useContext(MemoryContext);\r\n\treturn (\r\n\t\t<div className=\"register-values\">\r\n\t\t\t<span>AC: {memory.AC}</span>\r\n\t\t\t<span>PC: {memory.PC}</span>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default RegisterValues;\r\n","import LineContainer from './LineContainer';\r\nimport RegisterValues from './RegisterValues';\r\nimport { useState } from 'react';\r\n\r\nconst Editor = () => {\r\n\tconst [lineCount, setLines] = useState(21);\r\n\r\n\treturn (\r\n\t\t<div className=\"editor\">\r\n\t\t\t<RegisterValues />\r\n\t\t\t<LineContainer lineCount={lineCount} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Editor;\r\n","import Editor from './components/Editor';\r\nimport { MemoryContext } from './hooks/MemoryContext';\r\nimport { useContext } from 'react';\r\nimport './index.css';\r\n\r\nconst App = () => {\r\n\tconst { memory, setMemory } = useContext(MemoryContext);\r\n\r\n\tconst getValue = (at, val) => {\r\n\t\tswitch (at) {\r\n\t\t\tcase '$':\r\n\t\t\t\treturn Number(val);\r\n\t\t\tcase '@':\r\n\t\t\t\treturn Number(memory.stack[val]);\r\n\t\t\tcase '&':\r\n\t\t\t\treturn Number(memory.stack[getValue('@', val)]);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleNULL = (_, __) => {\r\n\t\tsetMemory(prev => {\r\n\t\t\treturn { ...prev, PC: prev.PC + 1 };\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleSTOP = (_, __) => {\r\n\t\treturn 0;\r\n\t};\r\n\r\n\tconst handleLOAD = (at, val) => {\r\n\t\tsetMemory(prev => {\r\n\t\t\treturn {\r\n\t\t\t\t...prev,\r\n\t\t\t\tAC: getValue(at, val),\r\n\t\t\t\tPC: prev.PC + 1,\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleSTORE = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tstack: prev.stack.map((el, i) =>\r\n\t\t\t\ti == getValue(at, val) ? memory.AC : el\r\n\t\t\t),\r\n\t\t\tPC: prev.PC + 1,\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleJUMP = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tPC: getValue(at, val),\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleJNEG = (at, val) => {\r\n\t\tif (memory.AC < 0) {\r\n\t\t\tsetMemory(prev => ({\r\n\t\t\t\t...prev,\r\n\t\t\t\tPC: getValue(at, val),\r\n\t\t\t}));\r\n\t\t} else {\r\n\t\t\tsetMemory(prev => {\r\n\t\t\t\treturn { ...prev, PC: prev.PC + 1 };\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleJZERO = (at, val) => {\r\n\t\tif (memory.AC == 0) {\r\n\t\t\tsetMemory(prev => ({\r\n\t\t\t\t...prev,\r\n\t\t\t\tPC: getValue(at, val),\r\n\t\t\t}));\r\n\t\t} else {\r\n\t\t\tsetMemory(prev => {\r\n\t\t\t\treturn { ...prev, PC: prev.PC + 1 };\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleADD = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tAC: Number(prev.AC) + getValue(at, val),\r\n\t\t\tPC: prev.PC + 1,\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleSUB = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tAC: Number(prev.AC) - getValue(at, val),\r\n\t\t\tPC: prev.PC + 1,\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleMULT = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tAC: prev.AC * getValue(at, val),\r\n\t\t\tPC: prev.PC + 1,\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleDIV = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tAC: prev.AC / getValue(at, val),\r\n\t\t\tPC: prev.PC + 1,\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleMOD = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tAC: prev.AC % getValue(at, val),\r\n\t\t\tPC: prev.PC + 1,\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleOR = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tAC: prev.AC || getValue(at, val) ? true : false,\r\n\t\t\tPC: prev.PC + 1,\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleAND = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tAC: prev.AC && getValue(at, val) ? true : false,\r\n\t\t\tPC: prev.PC + 1,\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleNOT = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tAC: !getValue(at, val),\r\n\t\t\tPC: prev.PC + 1,\r\n\t\t}));\r\n\t};\r\n\r\n\tconst commands = {\r\n\t\tNULL: handleNULL,\r\n\t\tSTOP: handleSTOP,\r\n\t\tLOAD: handleLOAD,\r\n\t\tSTORE: handleSTORE,\r\n\t\tJUMP: handleJUMP,\r\n\t\tJNEG: handleJNEG,\r\n\t\tJZERO: handleJZERO,\r\n\t\tADD: handleADD,\r\n\t\tSUB: handleSUB,\r\n\t\tMULT: handleMULT,\r\n\t\tDIV: handleDIV,\r\n\t\tMOD: handleMOD,\r\n\t\tOR: handleOR,\r\n\t\tAND: handleAND,\r\n\t\tNOT: handleNOT,\r\n\t};\r\n\r\n\tconst doOperation = operation => {\r\n\t\tconst [command, addressType, value] = operation.split(' ');\r\n\t\treturn commands[command](addressType, value);\r\n\t};\r\n\r\n\tconst resetMemory = () => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\tstack: Array(31).fill(0),\r\n\t\t\tprogramRunning: false,\r\n\t\t\tAC: 0,\r\n\t\t\tPC: 0,\r\n\t\t}));\r\n\t};\r\n\r\n\tconst runCode = () => {\r\n\t\tresetMemory();\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tprogramRunning: true,\r\n\t\t}));\r\n\r\n\t\tconst inputList = document.querySelectorAll('.line > input');\r\n\r\n\t\tfor (let i = 0; i < inputList.length; i++) {\r\n\t\t\tif (inputList[i].value == '' || !isNaN(inputList[i].value)) {\r\n\t\t\t\tsetMemory(prev => ({\r\n\t\t\t\t\t...prev,\r\n\t\t\t\t\tPC: prev.PC + 1,\r\n\t\t\t\t}));\r\n\t\t\t\tcontinue;\r\n\t\t\t} else {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tdoOperation(inputList[i].value);\r\n\t\t\t\t} catch {\r\n\t\t\t\t\tinputList[i].classList.add('input-error');\r\n\t\t\t\t\tresetMemory();\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tprogramRunning: false,\r\n\t\t}));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"main-container\">\r\n\t\t\t<Editor />\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"run-program\"\r\n\t\t\t\tdisabled={memory.programRunning}\r\n\t\t\t\tonClick={runCode}\r\n\t\t\t>\r\n\t\t\t\tSIEMA\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { MemoryProvider } from './hooks/MemoryContext';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<MemoryProvider>\n\t\t\t<App />\n\t\t</MemoryProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}